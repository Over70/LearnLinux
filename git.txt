在Windows上安装Git
安装完成后,	在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
初始设置:
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

	因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
	当然也可以对某个仓库指定不同的用户名和Email地址。

版本库
	什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件
都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
  创建一个版本库非常简单，创建一个空目录，进入，然后执行一个git init命令可以把目录变成可以管理的仓库。
 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。
	在命令行执行 git init 命令把这个目录变成Git可以管理的仓库：

	瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的话可以发现当前目录下多了一个.git的目录，
这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。.git目录默认是隐藏的.

添加文件到Git库
	把一个文件放到Git仓库只需要两步。
	第一步：用命令git add告诉Git，把文件添加到仓库.
	    git add readme.txt   // 把readme.txt 添加到git库中。
	第二步，用命令git commit告诉Git，把文件提交到仓库：
	 		git commit -m "wrote a readme file"   //-m后面输入的是本次提交的说明.

   为什么Git添加文件需要add，commit一共两步呢？
   答：因为commit可以一次提交很多文件，所以你可以多次add不同的文件。
       可以这样add 文件。
        git add file1.txt
				git add file2.txt file3.txt  //同时添加两个文件到库中。
				git commit -m "add 3 files."

修改已经提交的文件然后继续提交
	成功地添加并提交了一个文件后，我们可以继续修改这个文件。文件被修改后，可以通过 git status命令查看结果。
			git status
	git status命令可以让我们时刻掌握仓库当前的状态，告诉我们，那些文件被修改过了，但还没有准备提交。

	察看具体的文件更改内容: 可以使用 git diff fileName 来查看。
		git diff readme.txt  //查看readme.txt文件的具体更改情况，具体的差异显示方式用的是标准的unix diff的形式。
		git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式。

  如果没有问题就可以添加，提交了。
  		git add readme.txt   //添加 readme.txt到库中。
  		git status    //显示现在的状态，将要被提交的修改包括readme.txt。
  		git commit -m "comments"  // 放心的进行提交。
  		git status    //查看提交后的仓库状态，Git告诉当前没有需要提交的修改，工作目录是干净（working directory clean）的。

版本回退

	  不断的对文件进行修改，然后不断提交修改到版本库里。每当你觉得文件修改到一定程度的时候，
就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，
还可以从最近的一个commit恢复，然后继续工作.
    在Git中，我们用git log命令查看每次commit的历史纪录.
    git log
			commit 3628164fb26d48395383f8f31179f24e0882e1e0  // commit Id
			Author: Michael Liao <askxuefeng@gmail.com>      // 作者/提交人
			Date:   Tue Aug 20 15:11:49 2013 +0800           // 提交时间

			    append GPL                                   // 提交时的备注

		git log命令显示从最近到最远的提交日志，如果嫌输出信息太多，以试试加上--pretty=oneline参数.
		这样每次提交就显示在一行上了.

	 要想回退到前面的版本，首先需要了解各个版本。
	 在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（commit Id），上一个版本就是HEAD^，
上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
   要把当前版本回退到上一个版本时，就可以使用git reset命令：
   	 git reset --hard HEAD^  // HEAD^ 表示上一个版本 hard后面介绍
   执行完成后，在打开你的文件看看，已经变成了上上次提交后的样子了。

回退到某一具体的版本
		找到具体准备回退到的版本的commit id,然后执行git reset 命令就可以了。
		注意commit ID不是那么长全部需要写，可以写前面8位就可以了。有了这8位git就可以定位到你需要的版本了。
		回退到3628164 版本
			git reset --hard 3628164

		Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD重新指向你命令行中指定的版本就可以了.

如何查找具体的Commit Id
		Git提供了一个命令git reflog用来记录你的每一次命令,使用它可以查看你的每一次命令，在他所显示的结果前面有每次提交的commit id。
		git reflog
			ea34578 HEAD@{0}: reset: moving to HEAD^
			3628164 HEAD@{1}: commit: append GPL
			ea34578 HEAD@{2}: commit: add distributed
			cb926e7 HEAD@{3}: commit (initial): wrote a readme file

管理修改
		需要清楚工作区和暂存区的概念和区别。
		加入我们这样操作：
			第一次修改 -> git add -> 第二次修改 -> git commit
		Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交。
		但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，
		也就是第一次的修改被提交了，第二次的修改不会被提交。
		此时可以通过 git status 来查看状态。
		如何提交第二次修改呢？
		可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，
		就相当于把两次修改合并后一块提交了.
    提交后，用git diff HEAD -- filename 命令可以查看工作区和版本库里面最新版本的区别：

撤销修改
	如果把文件更改错误了，我们需要怎么处理呢？ 可以撤销修改。

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
		第一步用命令git reset HEAD file，就回到了场景1，
		第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		git checkout -- readme.txt     //把readme.txt文件在工作区的修改全部撤销

删除文件
  如果需要删除一个已经提交到库中的文件，直接在工作区中删除文件，是不起作用的。git status 可以检测到什么文件被删除了。
      rm readme.txt   //删除readme.txt文件
      git status      //可以发现readme.txt文件被删除。
  此时有两种可能
  		1：错误删除了该文件，该文件需要被恢复。
  			git checkout -- readme.txt  //checkout readme.txt 文件到工作区，恢复被删除的文件。最后一次提交后修改得内容会丢失
  	  2: 确实需要删除，从库中删除。
  	    git rm readme.txt  //从库中删除readme.txt
  	    git commit -m "comments"  //提交上一步的删除操作
  	  这样文件才真的被删除。

远程仓库
		git的特色是分布式版本控制系统。所以远程的版本库是其特色之一。
		远程服务器有两种办法获得。1：自己搭建。2：是用免费的github。
    Github是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
    本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置。
    第1步：创建SSH Key。
    	 在用户主目录下，打开gitbash，然后创建SSH Key.
    	  ssh-keygen -t rsa -C "youremail@example.com"  // 创建RSA类型的key，后面的邮件是自己的邮件地址。
    	 执行后在自己的用户主目录下会有一个.ssh的目录下，目录下有id_rsa和id_rsa.pub这两个文件。
    	 这两个文件是SSH Key的密钥对， id_rsa是私钥，id_rsa.pub是公钥。
    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，
     在Key文本框里粘贴id_rsa.pub文件的内容。

    GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
    只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

    添加远程库
    	我们可以在GitHub上建立一个新的库，并且和本地的库关联起来，这样就可以让两个仓库远程同步了。
    	创建好远程库后，进入本地的库的目录。然后执行下面的指令
    	1：git remote add origin git@github.com:GitHubUserName/RomoteRepositoryName.git  //使用git协议将本地库和远程库关联起来。
    		 git remote add origin https://github.com/GitHubUserName/RomoteRepositoryName.git  //使用https协议将本地库和远程库关联起来。
	    	参数解释
	    	  origin：远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	    	  GitHubUserName: 用户在GitHub网站的登陆用户名，注意大小写。
	    	  RomoteRepositoryName: 所创建的库的名称。

	    	Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外，
	    还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
      2：git push -u origin master   //把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
    	    由于远程库是空的，第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
    	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

     	完成这两个命令后，察看刚才自己所创建的GitHub的库，可以发现文件已经和本地库一模一样了。
			注意：这两个命令当你在GitHub上创建辛苦完成后，会在页面上显示出来。可以直接用就可以了。
      3： git push origin master   // 把本地修改后的文件推送到远端服务器。
         origin 为远程库的名字
         master  为推送到远程的maser分支。



    克隆远程库
        如果先有了远程库，然后从远程库克隆本地库。
        1：在GitHub上创建一个新的库。
        2：使用git clone 克隆库到本地。
           git clone git@github.com:GitHubUserName/RomoteRepositoryName.git //克隆远端的库到本地

           GitHubUserName: 用户在GitHub网站的登陆用户名，注意大小写。
	    	   RomoteRepositoryName: 所创建的库的名称。
           使用的是git协议
           完成后会在当前目录下新建一个与克隆的库名称一模一样的目录。
      两个协议的url例子
     			https://github.com/Over70/LearnLinux.git
					git@github.com:Over70/LearnLinux.git

分支管理
   Git鼓励大量使用分支：

		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>

		其中name为分支名称。

		分支描述：

			每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。最初只有一条时间线，在Git里，这个分支叫主分支，即master分支。
	 HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

      一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
   每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.
      当创建新的分支时，例如dev时，Git新建了一个指针叫dev，指向与master相同的提交，再把HEAD指向dev，就表示当前分支在dev上.
      Git创建分支很快，因为除了增加一个dev指针，改变HEAD的指向，工作区的文件都没有任何变化。
      从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
      假如我们在dev上的工作完成了，就可以把dev合并到master上。最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。