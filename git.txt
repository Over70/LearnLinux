GIT教程网址
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

在Windows上安装Git
安装完成后,	在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
初始设置:
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

	因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
	注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
	当然也可以对某个仓库指定不同的用户名和Email地址。

版本库
	什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件
都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
  创建一个版本库非常简单，创建一个空目录，进入，然后执行一个git init命令可以把目录变成可以管理的仓库。
 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。
	在命令行执行 git init 命令把这个目录变成Git可以管理的仓库：

	瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的话可以发现当前目录下多了一个.git的目录，
这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。.git目录默认是隐藏的.

添加文件到Git库
	把一个文件放到Git仓库只需要两步。
	第一步：用命令git add告诉Git，把文件添加到仓库.
	    git add readme.txt   // 把readme.txt 添加到git库中。
	第二步，用命令git commit告诉Git，把文件提交到仓库：
	 		git commit -m "wrote a readme file"   //-m后面输入的是本次提交的说明.

   为什么Git添加文件需要add，commit一共两步呢？
   答：因为commit可以一次提交很多文件，所以你可以多次add不同的文件。
       可以这样add 文件。
        git add file1.txt
				git add file2.txt file3.txt  //同时添加两个文件到库中。
				git commit -m "add 3 files."

修改已经提交的文件然后继续提交
	成功地添加并提交了一个文件后，我们可以继续修改这个文件。文件被修改后，可以通过 git status命令查看结果。
			git status
	git status命令可以让我们时刻掌握仓库当前的状态，告诉我们，那些文件被修改过了，但还没有准备提交。

	察看具体的文件更改内容: 可以使用 git diff fileName 来查看。
		git diff readme.txt  //查看readme.txt文件的具体更改情况，具体的差异显示方式用的是标准的unix diff的形式。
		git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式。

  如果没有问题就可以添加，提交了。
  		git add readme.txt   //添加 readme.txt到库中。
  		git status    //显示现在的状态，将要被提交的修改包括readme.txt。
  		git commit -m "comments"  // 放心的进行提交。
  		git status    //查看提交后的仓库状态，Git告诉当前没有需要提交的修改，工作目录是干净（working directory clean）的。

版本回退

	  不断的对文件进行修改，然后不断提交修改到版本库里。每当你觉得文件修改到一定程度的时候，
就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，
还可以从最近的一个commit恢复，然后继续工作.
    在Git中，我们用git log命令查看每次commit的历史纪录.
    git log
			commit 3628164fb26d48395383f8f31179f24e0882e1e0  // commit Id
			Author: Michael Liao <askxuefeng@gmail.com>      // 作者/提交人
			Date:   Tue Aug 20 15:11:49 2013 +0800           // 提交时间

			    append GPL                                   // 提交时的备注

		git log命令显示从最近到最远的提交日志，如果嫌输出信息太多，以试试加上--pretty=oneline参数.
		这样每次提交就显示在一行上了.

	 要想回退到前面的版本，首先需要了解各个版本。
	 在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（commit Id），上一个版本就是HEAD^，
上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
   要把当前版本回退到上一个版本时，就可以使用git reset命令：
   	 git reset --hard HEAD^  // HEAD^ 表示上一个版本 hard后面介绍
   执行完成后，在打开你的文件看看，已经变成了上上次提交后的样子了。

回退到某一具体的版本
		找到具体准备回退到的版本的commit id,然后执行git reset 命令就可以了。
		注意commit ID不是那么长全部需要写，可以写前面8位就可以了。有了这8位git就可以定位到你需要的版本了。
		回退到3628164 版本
			git reset --hard 3628164

		Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD重新指向你命令行中指定的版本就可以了.

如何查找具体的Commit Id
		Git提供了一个命令git reflog用来记录你的每一次命令,使用它可以查看你的每一次命令，在他所显示的结果前面有每次提交的commit id。
		git reflog
			ea34578 HEAD@{0}: reset: moving to HEAD^
			3628164 HEAD@{1}: commit: append GPL
			ea34578 HEAD@{2}: commit: add distributed
			cb926e7 HEAD@{3}: commit (initial): wrote a readme file

管理修改
		需要清楚工作区和暂存区的概念和区别。
		加入我们这样操作：
			第一次修改 -> git add -> 第二次修改 -> git commit
		Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交。
		但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，
		也就是第一次的修改被提交了，第二次的修改不会被提交。
		此时可以通过 git status 来查看状态。
		如何提交第二次修改呢？
		可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，
		就相当于把两次修改合并后一块提交了.
    提交后，用git diff HEAD -- filename 命令可以查看工作区和版本库里面最新版本的区别：

撤销修改
	如果把文件更改错误了，我们需要怎么处理呢？ 可以撤销修改。

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
		第一步用命令git reset HEAD file，就回到了场景1，
		第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		git checkout -- readme.txt     //把readme.txt文件在工作区的修改全部撤销

删除文件
  如果需要删除一个已经提交到库中的文件，直接在工作区中删除文件，是不起作用的。git status 可以检测到什么文件被删除了。
      rm readme.txt   //删除readme.txt文件
      git status      //可以发现readme.txt文件被删除。
  此时有两种可能
  		1：错误删除了该文件，该文件需要被恢复。
  			git checkout -- readme.txt  //checkout readme.txt 文件到工作区，恢复被删除的文件。最后一次提交后修改得内容会丢失
  	  2: 确实需要删除，从库中删除。
  	    git rm readme.txt  //从库中删除readme.txt
  	    git commit -m "comments"  //提交上一步的删除操作
  	  这样文件才真的被删除。

远程仓库
		git的特色是分布式版本控制系统。所以远程的版本库是其特色之一。
		远程服务器有两种办法获得。1：自己搭建。2：是用免费的github。
    Github是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
    本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置。
    第1步：创建SSH Key。
    	 在用户主目录下，打开gitbash，然后创建SSH Key.
    	  ssh-keygen -t rsa -C "youremail@example.com"  // 创建RSA类型的key，后面的邮件是自己的邮件地址。
    	 执行后在自己的用户主目录下会有一个.ssh的目录下，目录下有id_rsa和id_rsa.pub这两个文件。
    	 这两个文件是SSH Key的密钥对， id_rsa是私钥，id_rsa.pub是公钥。
    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，
     在Key文本框里粘贴id_rsa.pub文件的内容。

    GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
    只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

    添加远程库
    	我们可以在GitHub上建立一个新的库，并且和本地的库关联起来，这样就可以让两个仓库远程同步了。
    	创建好远程库后，进入本地的库的目录。然后执行下面的指令
    	1：git remote add origin git@github.com:GitHubUserName/RomoteRepositoryName.git  //使用git协议将本地库和远程库关联起来。
    		 git remote add origin https://github.com/GitHubUserName/RomoteRepositoryName.git  //使用https协议将本地库和远程库关联起来。
	    	参数解释
	    	  origin：远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	    	  GitHubUserName: 用户在GitHub网站的登陆用户名，注意大小写。
	    	  RomoteRepositoryName: 所创建的库的名称。

	    	Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外，
	    还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
      2：git push -u origin master   //把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
    	    由于远程库是空的，第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
    	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

     	完成这两个命令后，察看刚才自己所创建的GitHub的库，可以发现文件已经和本地库一模一样了。
			注意：这两个命令当你在GitHub上创建辛苦完成后，会在页面上显示出来。可以直接用就可以了。
      3： git push origin master   // 把本地修改后的文件推送到远端服务器。
         origin 为远程库的名字
         master  为推送到远程的maser分支。



    克隆远程库
        如果先有了远程库，然后从远程库克隆本地库。
        1：在GitHub上创建一个新的库。
        2：使用git clone 克隆库到本地。
           git clone git@github.com:GitHubUserName/RomoteRepositoryName.git //克隆远端的库到本地

           GitHubUserName: 用户在GitHub网站的登陆用户名，注意大小写。
	    	   RomoteRepositoryName: 所创建的库的名称。
           使用的是git协议
           完成后会在当前目录下新建一个与克隆的库名称一模一样的目录。
      两个协议的url例子
     			https://github.com/Over70/LearnLinux.git
					git@github.com:Over70/LearnLinux.git

分支管理
   Git鼓励大量使用分支：

		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>

		其中name为分支名称。

		分支描述：

			每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。最初只有一条时间线，在Git里，这个分支叫主分支，即master分支。
	 HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

      一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
   每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.
      当创建新的分支时，例如dev时，Git新建了一个指针叫dev，指向与master相同的提交，再把HEAD指向dev，就表示当前分支在dev上.
      Git创建分支很快，因为除了增加一个dev指针，改变HEAD的指向，工作区的文件都没有任何变化。
      从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
      假如我们在dev上的工作完成了，就可以把dev合并到master上。最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。
  冲突解决
  	1：什么时候会产生冲突。
  	   当同一个文件的同一行内容在不同的branch或者不同的不同的用户作了修改，而且对方已经提交。
  	此时当合并两个文件的时候就会产生冲突。在git中合并分支的时候比较容易冲突。
  	2：当我们试图合并两个分支的时候，如果出现这种提示就是发生了冲突。
  			git merge BranchName   //合并BranchName分支到当前分支。
  			 CONFLICT (content): Merge conflict in FileName.  // 在合并文件FileName时发生了冲突
  			 Automatic merge failed; fix conflicts and then commit the result. //自动合并失败，解决冲突后再进行提交。
       用 git status 也可以告诉我们冲突的文件。
    3：解决冲突。
    		Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改后保存文件，然后重新提交就可以解决冲突了。
    		使用文件编辑工具对冲突文件进行编辑，注意标记也需要清除掉，修改后保存。然后我们需要提交告诉git冲突已经解决了。
    		注意：如果是合并分支的时候产生的冲突，冲突文件解决提交后，不需要再次进行合并了。前面的git merge 是已经把分支合并了，
    	我们只需要解决冲突就可以了。
    4: 用带参数的git log也可以看到分支的合并情况
    		git log --graph --pretty=oneline --abbrev-commit // 查看分支合并的情况

分支管理
		通常，合并分支时，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
		如果强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
		强制禁用Fast forward模式可以通过参数 --no-ff 来实现。
		使用  --no-ff的例子
		 	git merge --no-ff -m "merge with no-ff" dev  //使用--no-ff 合并dev到当前branch. -m为合并时的注释信息。

	 分支管理策略
		在实际开发中，我们应该按照几个基本原则进行分支管理：
			首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活.
			那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，
	 再把dev分支合并到master上，在master分支发布1.0版本；
			各个开发成员都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
    	主分支 master:   代码库应该有一个、且仅有一个主分支。
    	开发分支 develop: 开发分支
   		功能分支 feature: 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。
    	预发布分支  release：指发布正式版本之前(即合并到Master分支之前)，需要有一个预发布的版本进行测试。
    	                     预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。
    	                     命名，可以采用release-*的形式。
    	bug 分支 fixbug：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。
    									 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。
    									 它的命名，可以采用fixbug-*的形式。
    	其它分支 other
Bug分支
   在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
   但当我们需要修复bug的时候，原来的工作区还有没有完成的内容，此时直接切换工作区的话，这些还不能进行提交的文件如何处理。
   Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作.
   		git stash
  把当前工作去储存起来，然后切换到你需要开始修复bug的分支。然后就可以开始修复分支了。

  有关 stash的几个命令。
  	git stash list  //查看当前所有储存起来的工作区状态。
  	git stash       //储存当前工作区
  	git stash apply //恢复当前储存的工作去。但是恢复后，stash内容并不删除，你需要用git stash drop来删除.
  	git stash pop   //恢复工作区，恢复同时把stash内容也删了。
  	git stash drop  //删除当前的stash的内容。
  	git stash apply stash@{0}  // 根据选择来恢复stash内容。

  如果一个分支还没有被合并，删除时必须 git branch -D BranchName 这种格式才可以删除。

多人协作
		当从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
    要查看远程库的信息，用git remote。要查看更加详细的信息可以用 git remote -v

   推送分支：就是把该分支上的所有本地提交推送到远程库。
   		git push RemoteRepositoryName BranchName // RemoteRepositoryName为远程库的名称。 BranchName为需要推送到远程的分支名称.

   抓取分支
     git pull 把最新的提交从远程库的对应分支抓下来，然后，在本地合并，解决冲突，而后才可以再次的进行推送。
     如果git pull失败时，可能是没有建立远端的分支到本地分支的关联，设置关联后再进行抓取。
     git branch --set-upstream LocalBranch RemoteRepository/Branch   // --set-upstream  设置关联 LocalBranch到RemoteRepository/Branch的关联。

   多人协作的通常模式
    首先，可以试图用git push origin branch-name推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
		  用命令git branch --set-upstream branch-name origin/branch-name。

标签管理
		发布一个版本时，通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，
	就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。

		Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），
	所以，创建和删除标签都是瞬间完成的。

	创建标签
		Git中打标签非常简单，首先，切换到需要打标签的分支上，然后执行 git tag <tagname> 就可以创建一个标签了。例如下：
			$ git branch   //查看当前的分支状况
				* dev
				  master
			$ git checkout master    //切换到master 分支
				Switched to branch 'master'
 			$ git tag v1.0    //在master分支上建立一个v1.0的标签

 		   默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
	  方法是找到历史提交的commit id，然后打上就可以了
	     git log --pretty=oneline --abbrev-commit   // 查找具体的commit  id
	     gt tag v0.9 commit_id    //在具体的commit 上创建标签，commit_id为在前一条命令中找到的ID.

	 创建带有说明的标签
	 		 git tag -a <tagname> -m "<comment>" <commit_id>  //tagname为指定的标签名, comment为具体的版本信息，commit_id为具体的commit id。

	 查看标签
	 		git tag： 查看标签
	 		git show <tagname>  查看具体的标签信息，看到说明文字.


    小结
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

    git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

    命令git tag可以查看所有标签。

   操作标签
   		删除标签： git tag -d <tagname>
   				因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
   	  推送标签:  git push origin <tagname>   //origin 远程数据库的名称， tagname为准备推送的标签。
   	  推送所有标签:  git push origin --tags  // --tags参数表明所有标签
   	  删除远程标签:
   	  		标签已经推送到远程，要删除远程标签就麻烦一点.
   	  		1: 首先删除本地标签。  git tag -d <tabname>
   	  		2: 推送已经删除的标签到远端。 git push origin :refs/tags/<tagname>

				实际上Git 的推送和删除远程标签命令是相同的，删除操作实际上就是推送空的源标签refs：
					git push origin tagname
					相当于
					git push origin refs/tags/tagname :refs/tags/tagname
		小结

		    命令git push origin <tagname>可以推送一个本地标签；

		    命令git push origin --tags可以推送全部未推送过的本地标签；

		    命令git tag -d <tagname>可以删除一个本地标签；

		    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

使用github
		   GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，
		通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。

			 如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以
	  访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，
	  然后，从自己的账号下clone。
	     然后进行修改，提交推送。但是推送只是推送到自己的克隆出来的库。
	     如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。
	   当然，对方是否接受你的pull request就不一定了

	   小结

		    在GitHub上，可以任意Fork开源仓库；

		    自己拥有Fork后的仓库的读写权限；

		    可以推送pull request给官方仓库来贡献代码。

自定义GIT
		彩色显示git命令的内容。
				git config --global color.ui true: 让Git显示颜色，会让命令输出看起来更醒目。

		忽略特殊文件
			  有些不需要由git管理的文件类型，总是出现在untracked files中。可以通过以下办法简单的过滤.
			  1: 在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去.
			  2：提交 .gitignore 文件到库中，使git可以管理 .gitignore 文件。
			  3：Git就会自动忽略这些文件。

			  不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
			所有配置文件可以直接在线浏览：https://github.com/github/gitignore

	配置别名
		给一些长的命令起一个别名，然后执行这个别名就相当于执行了该长命令。 就像linux 下的 ll 就执行 ls -l的指令一样。
		设置别名
			git config --global alias.AliasName command  // alias表明创建的是别名。 AliasName 是具体的别名，
																									 //command 为 原本需要执行的命令.
																									 //--global 表示本台机器上的所有仓库下该别名都有效。
			git config --global alias.st status   // 设置git statue 的别名为 git st.

			一个超常的log命令,别名为 git lg
			git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

	配置文件
			配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
			配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
			而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
			可以在配置文件中设置alias,或者删除。
			一个config文件的内容
			$ cat .git/config
			[core]
			    repositoryformatversion = 0
			    filemode = true
			    bare = false
			    logallrefupdates = true
			    ignorecase = true
			    precomposeunicode = true
			[remote "origin"]
			    url = git@github.com:michaelliao/learngit.git
			    fetch = +refs/heads/*:refs/remotes/origin/*
			[branch "master"]
			    remote = origin
			    merge = refs/heads/master
			[alias]
			    last = log -1

搭建git服务器
		github是一个免费的git服务器。但总有这样或者那样的问题，不是很适合自己。自己搭建一个服务器来解决这个问题。

		搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

		注意搭建前注意用户需要有 sudo 的权限。
			第一步，安装git
				$ sudo apt-get install git

			第二步，创建一个git用户，用来运行git服务：
				$ sudo adduser git

			第三步，创建证书登录：
				收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

		  第四步，初始化Git仓库：
		  	先选定一个目录作为Git仓库，(例如 /srv/sample.git），在/srv目录下输入命令：
		  	$ sudo git init --bare sample.git  //sample.git文件名可以根据需要自己设定，但必须是以.git结尾。
		  	 创建一个裸库。裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，
		  并且服务器上的Git仓库通常都以.git结尾。
		  	$ sudo chown -R git:git sample.git //更改sample.git文件的owner.

		  第五步，禁用shell登录。
		  	出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。
		  	由 git:x:1001:1001:,,,:/home/git:/bin/bash
		  	改为
 					 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

			这样git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

			第六步，克隆远程仓库
					$ git clone git@server:/srv/sample.git
					可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

		管理公钥

			如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。
			如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。


		管理权限

			有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，
		每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以
		Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端
		编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。

这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。